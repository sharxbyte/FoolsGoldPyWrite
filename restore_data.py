import csv
import os
import shutil
import time
import logging
from tkinter import messagebox, filedialog
from datetime import datetime

# If Emergency_backup, clear_interview_data, create_new_directory_and_log_file, 
# set_project_type, check_api_key are defined in other modules, import them as well
# from your_module_name import Emergency_backup, clear_interview_data, ...



#emergency backup code
def restore_data(logger):
    logger.setLevel(logging.CRITICAL)  # Disable logging

    # Prompt to save log file if it exists and has any information other than lines containing "program started"
    if os.path.exists("log.txt"):
        try:
            with open("log.txt", "r") as f:
                log_file_contents = f.readlines()
                if len(log_file_contents) > 1:
                    save_log_prompt = messagebox.askyesno("Save Log", "Do you want to save the log file before continuing?")
                    if save_log_prompt:
                        save_log_file()
        except FileNotFoundError:
            # the file could not be found
            pass

    Emergency_backup()

    # Warn that restoring data will overwrite current project data
    if os.path.exists("log.txt") or os.path.exists("interview.txt") or os.path.exists("outline.txt") or os.path.exists("author_style.txt"):
        confirm_restore = messagebox.askyesno("Confirm Data Restore",
                                               "Restoring data will overwrite current project data. Do you want to continue?")

        if not confirm_restore:
            return

    # Clear all prior interview data and create new directory and log file
    clear_interview_data()
    create_new_directory_and_log_file()

    # Open browse file dialog to select log file to restore
    filetypes = (("Text files", "*.txt"), ("All files", "*.*"))
    selected_file = filedialog.askopenfilename(title="Select Log File", filetypes=filetypes)

    # Read log file to determine whether it was generated in this program and whether it's fiction or non-fiction or biography
    if not os.path.exists(selected_file):
        return

    with open(selected_file, "r") as f:
        first_line = f.readline().strip()
        second_line = f.readline().strip()

    if "logger.info('Generated by FoolsGoldPyWrite')" not in first_line:
        messagebox.showerror("Invalid Log File", "The selected file was not generated by FoolsGoldPyWrite.")
        return

    project_type = None
    if "Fiction" in second_line:
        project_type = "Fiction"
    elif "Non-Fiction" in second_line:
        project_type = "Non-Fiction"
    elif "Biography" in second_line:
        project_type = "Biography"
    else:
        messagebox.showerror("Invalid Log File", "Unable to determine project type from the log file.")
        return

    set_project_type(project_type)

# Restore data from the log file
    with open(selected_file, "r") as f:
        interview_data = []
        for line in f:
            # Check if line contains interview information
            if "Interview:" in line:
                # Parse interview information from the line
                interview_info = line.split(":")[1].strip().split(",")
                interview_data.append(interview_info)

    # Write interview data to interview.txt
    if interview_data:
        with open("interview.txt", "a") as f:
            writer = csv.writer(f)
            for row in interview_data:
                writer.writerow(row)

    if os.path.exists("outline.txt"):
        shutil.copyfile("outline.txt", "outline_backup.txt")
        with open("outline.txt", "r") as f:
            outline_contents = f.read()
        with open("outline_backup.txt", "a") as f:
            f.write(f"\n\nBackup created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n{outline_contents}")
        with open("outline.txt", "w") as f:
            f.write("")
        
    if os.path.exists("author_style.txt"):
        shutil.copyfile("author_style.txt", "author_style_backup.txt")
        with open("author_style.txt", "r") as f:
            author_style_contents = f.read()
        with open("author_style_backup.txt", "a") as f:
            f.write(f"\n\nBackup created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n{author_style_contents}")
        with open("author_style.txt", "w") as f:
            f.write("")
        
    # Ask user to check API key
    check_api_key()

    logger.setLevel(logging.INFO)  # Enable logging again
    
    messagebox.showinfo("Success", "Data has been restored from the log file.")
