# Standard library imports
import datetime
import os
import shutil
import logging

# Third-party library imports
import tkinter as tk
from tkinter import ttk

# Local imports
import importlib
import inspect
from definitions import *

def convert_log_to_interview():
    new_log_file = "interview.txt"
    format_str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    try:
        # Disable logging while the conversion runs
        logging.disable(logging.CRITICAL)

        # Copy the log file to the interview file
        shutil.copyfile(log_file, new_log_file)

        # Remove the format string for the logger from each line
        with open(new_log_file, "r") as f:
            log = f.readlines()

        # Get work type and author name from log file
        work_type = log[0].split(": ")[1].strip()
        author_name = log[1].split(": ")[1].strip()

        # Get subject name and interview dates if work type is Biography
        if work_type == "Biography":
            subject_name = log[2].split(": ")[1].strip()
            start_date = datetime.datetime.strptime(log[-1].split(", ")[0], "%Y-%m-%d %H:%M:%S")
            end_date = datetime.datetime.strptime(log[3].split(", ")[0], "%Y-%m-%d %H:%M:%S")
            interview_duration = str(end_date - start_date)
            interview_dates = f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"

        # Get current date
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")

        # Get interview details string
        interview_details = f"Interview details:\nWork type: {work_type}\nAuthor name: {author_name}\n"
        if work_type == "Biography":
            interview_details += f"Subject name: {subject_name}\nInterview duration: {interview_duration}\nInterview dates: {interview_dates}\n"
        interview_details += f"Current date: {current_date}\n\n"

        # Generate interview file
        with open(new_log_file, "w") as f:
            f.write(interview_details)
            for line in log:
                if "Generated by FoolsGoldPyWrite" not in line:
                    f.write(line.replace(format_str, ""))

        print("Interview file generated successfully.")

    except Exception as e:
        print(f"Error while generating interview file, please make sure there is a log file created by this program in the directory {str(e)}")

    finally:
        # Re-enable logging after the conversion is done
        logging.disable(logging.NOTSET)
